definition module e2_CashModel/* * Jordi Riemens    s4243064 * Thomas Churchman s4206606 * * Based on: * Pieter Koopman, pieter@cs.ru.nl * Skeleton for Advanced Programming, week 12, 2017 * A simple state model for an automated cash register */import StdEnv, GenEq, e1_Gastje:: Euro = {euro :: Int, cent :: Int}:: Product = Pizza | Beer | Cola:: Action = Add Product | Rem Product | Payclass euro a :: a -> Euroinstance euro Product, Euroinstance euro Int, (Int, Int), [e] | euro einstance + Euroinstance - Euroinstance zero Euroderive gEq Euro, Productinstance ~ Euroinstance == Euro, Productmodel :: [Product] Action -> ([Product],[Euro])