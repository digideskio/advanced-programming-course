definition module e1_Gastje/* * Jordi Riemens    s4243064 * Thomas Churchman s4206606 * * Based on: * Pieter Koopman, pieter@cs.ru.nl * Skeleton for Advanced Programming, week 12, 2017 */import StdEnv, StdGeneric, GenEqtest :: p -> [String] | prop pclass prop a where holds :: a Prop -> [Prop]:: Propinstance prop Boolinstance prop (a->b) | prop b & testArg aclass testArg a | gen{|*|}, string{|*|}, gEq{|*|} ageneric gen a :: [a]derive gen Int, Bool, Char, UNIT, PAIR, EITHER, CONS, OBJECT, RECORD, FIELDgeneric string a :: a -> Stringderive string Int, Bool, Char, UNIT, PAIR, EITHER, CONS of gcd, OBJECT, RECORD of grd, FIELD of gfd//////////////////////////////////////////////////// Added                                        ////////////////////////////////////////////////////(For) infixl :: (a->b) [a] -> (a->b, [a]) | prop b:: FilterProp b = (==>) infixl 1 Bool b :: EqualsProp a = (=.=) infixl 2 a ainstance prop (a->b, [a]) | prop b & testArg a instance prop (FilterProp b) | prop binstance prop (EqualsProp a) | == a & string{|*|} a